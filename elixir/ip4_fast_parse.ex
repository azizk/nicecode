defmodule IP4ParserMacro do
  @vsn 1
  @author "Aziz Köksal"
  @license "MIT"

  @moduledoc """
  A fast way to parse an IPv4 address as an integer
  without strictly checking for validity.

  Generates the function clauses using macros.

  **Version:** #{@vsn}
  **Author:** #{@author}
  **License:** #{@license}
  """

  defmacro def_ip4_parser do
    function_clauses =
      for a <- 1..3, b <- 1..3, c <- 1..3, d <- 1..3 do
        pattern = bitstring_pattern_ast(a, b, c, d)
        expr = ip_segments_as_integer_ast(a, b, c, d)

        quote do
          def parse_ip4_as_integer_fast(unquote(pattern)), do: unquote(expr)
        end
      end

    quote do
      unquote_splicing(function_clauses)
      def parse_ip4_as_integer_fast(_), do: nil
    end
  end

  defp var(variable_name, index), do: {:"#{variable_name}#{index}", [], nil}

  defp ip_segment_variables_ast(variable_name, len) do
    for i <- 1..len, do: var(:"#{variable_name}#{i}", nil)
  end

  defp bitstring_pattern_ast(ai, bi, ci, di) do
    bit_pattern =
      ip_segment_variables_ast(:a, ai) ++
        [?.] ++
        ip_segment_variables_ast(:b, bi) ++
        [?.] ++
        ip_segment_variables_ast(:c, ci) ++
        [?.] ++
        ip_segment_variables_ast(:d, di)

    {:<<>>, [], bit_pattern}
  end

  defp ip_segments_as_integer_ast(a, b, c, d) do
    [
      {ip_digit_as_integer_ast(:a, a), 256 ** 3},
      {ip_digit_as_integer_ast(:b, b), 256 ** 2},
      {ip_digit_as_integer_ast(:c, c), 256},
      {ip_digit_as_integer_ast(:d, d), 1}
    ]
    |> Enum.reduce(nil, fn {expression, factor}, acc ->
      term =
        if factor == 1,
          do: expression,
          else: quote(do: unquote(expression) * unquote(factor))

      if acc == nil,
        do: term,
        else: quote(do: unquote(acc) + unquote(term))
    end)
  end

  defp ip_digit_as_integer_ast(variable_name, 1) do
    v1 = var(variable_name, 1)
    quote do: unquote(v1) - ?0
  end

  defp ip_digit_as_integer_ast(variable_name, 2) do
    v1 = var(variable_name, 1)
    v2 = var(variable_name, 2)
    quote do: (unquote(v1) - ?0) * 10 + (unquote(v2) - ?0)
  end

  defp ip_digit_as_integer_ast(variable_name, 3) do
    v1 = var(variable_name, 1)
    v2 = var(variable_name, 2)
    v3 = var(variable_name, 3)
    quote do: (unquote(v1) - ?0) * 100 + (unquote(v2) - ?0) * 10 + (unquote(v3) - ?0)
  end
end

defmodule IP4FastParser do
  @vsn 1
  @author "Aziz Köksal"
  @license "MIT"

  @moduledoc """
  A fast way to parse an IPv4 address as an integer
  without strictly checking for validity.

  **Version:** #{@vsn}
  **Author:** #{@author}
  **License:** #{@license}
  """

  @doc "Generates the whole function as a string."
  def generate_code do
    for a <- 1..3, b <- 1..3, c <- 1..3, d <- 1..3 do
      clause =
        for {letter, count} <- [{"a", a}, {"b", b}, {"c", c}, {"d", d}] do
          for(n <- 1..count, do: "#{letter}#{n}") |> Enum.join(",")
        end
        |> Enum.join(", ?., ")
        |> then(&"<<#{&1}>>")

      statement =
        for {letter, count, octet_shift} <- [
              {"a", a, 256 ** 3},
              {"b", b, 256 ** 2},
              {"c", c, 256},
              {"d", d, nil}
            ] do
          for(
            n <- 1..count,
            do: "(#{letter}#{n} - ?0)#{if(count - n != 0, do: " * #{10 ** (count - n)}")}"
          )
          |> Enum.join(" + ")
          |> then(fn octet -> if octet_shift, do: "(#{octet}) * #{octet_shift}", else: octet end)
        end
        |> Enum.join(" + ")

      clause <> " -> " <> statement
    end
    |> Enum.join("\n")
  end

  @spec parse_ip4_as_integer(binary) :: integer | nil
  def parse_ip4_as_integer(ip4_string) do
    case ip4_string do
      <<a1, ?., b1, ?., c1, ?., d1>> ->
        (a1 - ?0) * 16_777_216 + (b1 - ?0) * 65_536 + (c1 - ?0) * 256 + (d1 - ?0)

      <<a1, ?., b1, ?., c1, ?., d1, d2>> ->
        (a1 - ?0) * 16_777_216 + (b1 - ?0) * 65_536 + (c1 - ?0) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, ?., b1, ?., c1, ?., d1, d2, d3>> ->
        (a1 - ?0) * 16_777_216 + (b1 - ?0) * 65_536 + (c1 - ?0) * 256 + (d1 - ?0) * 100 +
          (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, ?., b1, ?., c1, c2, ?., d1>> ->
        (a1 - ?0) * 16_777_216 + (b1 - ?0) * 65_536 + ((c1 - ?0) * 10 + (c2 - ?0)) * 256 +
          (d1 - ?0)

      <<a1, ?., b1, ?., c1, c2, ?., d1, d2>> ->
        (a1 - ?0) * 16_777_216 + (b1 - ?0) * 65_536 + ((c1 - ?0) * 10 + (c2 - ?0)) * 256 +
          (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, ?., b1, ?., c1, c2, ?., d1, d2, d3>> ->
        (a1 - ?0) * 16_777_216 + (b1 - ?0) * 65_536 + ((c1 - ?0) * 10 + (c2 - ?0)) * 256 +
          (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, ?., b1, ?., c1, c2, c3, ?., d1>> ->
        (a1 - ?0) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0)

      <<a1, ?., b1, ?., c1, c2, c3, ?., d1, d2>> ->
        (a1 - ?0) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, ?., b1, ?., c1, c2, c3, ?., d1, d2, d3>> ->
        (a1 - ?0) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 +
          (d3 - ?0)

      <<a1, ?., b1, b2, ?., c1, ?., d1>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0)

      <<a1, ?., b1, b2, ?., c1, ?., d1, d2>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, ?., b1, b2, ?., c1, ?., d1, d2, d3>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, ?., b1, b2, ?., c1, c2, ?., d1>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0)

      <<a1, ?., b1, b2, ?., c1, c2, ?., d1, d2>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, ?., b1, b2, ?., c1, c2, ?., d1, d2, d3>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, ?., b1, b2, ?., c1, c2, c3, ?., d1>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0)

      <<a1, ?., b1, b2, ?., c1, c2, c3, ?., d1, d2>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, ?., b1, b2, ?., c1, c2, c3, ?., d1, d2, d3>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 +
          (d3 - ?0)

      <<a1, ?., b1, b2, b3, ?., c1, ?., d1>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          (c1 - ?0) * 256 + (d1 - ?0)

      <<a1, ?., b1, b2, b3, ?., c1, ?., d1, d2>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          (c1 - ?0) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, ?., b1, b2, b3, ?., c1, ?., d1, d2, d3>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          (c1 - ?0) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, ?., b1, b2, b3, ?., c1, c2, ?., d1>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0)

      <<a1, ?., b1, b2, b3, ?., c1, c2, ?., d1, d2>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, ?., b1, b2, b3, ?., c1, c2, ?., d1, d2, d3>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, ?., b1, b2, b3, ?., c1, c2, c3, ?., d1>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0)

      <<a1, ?., b1, b2, b3, ?., c1, c2, c3, ?., d1, d2>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, ?., b1, b2, b3, ?., c1, c2, c3, ?., d1, d2, d3>> ->
        (a1 - ?0) * 16_777_216 + ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 +
          (d3 - ?0)

      <<a1, a2, ?., b1, ?., c1, ?., d1>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0)

      <<a1, a2, ?., b1, ?., c1, ?., d1, d2>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, ?., b1, ?., c1, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, ?., b1, ?., c1, c2, ?., d1>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, ?., b1, ?., c1, c2, ?., d1, d2>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, ?., b1, ?., c1, c2, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, ?., b1, ?., c1, c2, c3, ?., d1>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, ?., b1, ?., c1, c2, c3, ?., d1, d2>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, ?., b1, ?., c1, c2, c3, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 +
          (d3 - ?0)

      <<a1, a2, ?., b1, b2, ?., c1, ?., d1>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          (c1 - ?0) * 256 + (d1 - ?0)

      <<a1, a2, ?., b1, b2, ?., c1, ?., d1, d2>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          (c1 - ?0) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, ?., b1, b2, ?., c1, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          (c1 - ?0) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, ?., b1, b2, ?., c1, c2, ?., d1>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, ?., b1, b2, ?., c1, c2, ?., d1, d2>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, ?., b1, b2, ?., c1, c2, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, ?., b1, b2, ?., c1, c2, c3, ?., d1>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, ?., b1, b2, ?., c1, c2, c3, ?., d1, d2>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, ?., b1, b2, ?., c1, c2, c3, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 + ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 +
          (d3 - ?0)

      <<a1, a2, ?., b1, b2, b3, ?., c1, ?., d1>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 + (c1 - ?0) * 256 + (d1 - ?0)

      <<a1, a2, ?., b1, b2, b3, ?., c1, ?., d1, d2>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, ?., b1, b2, b3, ?., c1, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, ?., b1, b2, b3, ?., c1, c2, ?., d1>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, ?., b1, b2, b3, ?., c1, c2, ?., d1, d2>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, ?., b1, b2, b3, ?., c1, c2, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, ?., b1, b2, b3, ?., c1, c2, c3, ?., d1>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, ?., b1, b2, b3, ?., c1, c2, c3, ?., d1, d2>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, ?., b1, b2, b3, ?., c1, c2, c3, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 10 + (a2 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 +
          (d3 - ?0)

      <<a1, a2, a3, ?., b1, ?., c1, ?., d1>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          (c1 - ?0) * 256 + (d1 - ?0)

      <<a1, a2, a3, ?., b1, ?., c1, ?., d1, d2>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          (c1 - ?0) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, a3, ?., b1, ?., c1, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          (c1 - ?0) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, a3, ?., b1, ?., c1, c2, ?., d1>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, a3, ?., b1, ?., c1, c2, ?., d1, d2>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, a3, ?., b1, ?., c1, c2, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, a3, ?., b1, ?., c1, c2, c3, ?., d1>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, a3, ?., b1, ?., c1, c2, c3, ?., d1, d2>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, a3, ?., b1, ?., c1, c2, c3, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 + (b1 - ?0) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 +
          (d3 - ?0)

      <<a1, a2, a3, ?., b1, b2, ?., c1, ?., d1>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 + (c1 - ?0) * 256 + (d1 - ?0)

      <<a1, a2, a3, ?., b1, b2, ?., c1, ?., d1, d2>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 + (c1 - ?0) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, a3, ?., b1, b2, ?., c1, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 + (c1 - ?0) * 256 + (d1 - ?0) * 100 +
          (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, a3, ?., b1, b2, ?., c1, c2, ?., d1>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 + ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, a3, ?., b1, b2, ?., c1, c2, ?., d1, d2>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 + ((c1 - ?0) * 10 + (c2 - ?0)) * 256 +
          (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, a3, ?., b1, b2, ?., c1, c2, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 + ((c1 - ?0) * 10 + (c2 - ?0)) * 256 +
          (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, a3, ?., b1, b2, ?., c1, c2, c3, ?., d1>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, a3, ?., b1, b2, ?., c1, c2, c3, ?., d1, d2>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, a3, ?., b1, b2, ?., c1, c2, c3, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 10 + (b2 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 +
          (d3 - ?0)

      <<a1, a2, a3, ?., b1, b2, b3, ?., c1, ?., d1>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 + (c1 - ?0) * 256 + (d1 - ?0)

      <<a1, a2, a3, ?., b1, b2, b3, ?., c1, ?., d1, d2>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, a3, ?., b1, b2, b3, ?., c1, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 + (c1 - ?0) * 256 +
          (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, a3, ?., b1, b2, b3, ?., c1, c2, ?., d1>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, a3, ?., b1, b2, b3, ?., c1, c2, ?., d1, d2>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, a3, ?., b1, b2, b3, ?., c1, c2, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 10 + (c2 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 + (d3 - ?0)

      <<a1, a2, a3, ?., b1, b2, b3, ?., c1, c2, c3, ?., d1>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0)

      <<a1, a2, a3, ?., b1, b2, b3, ?., c1, c2, c3, ?., d1, d2>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 10 + (d2 - ?0)

      <<a1, a2, a3, ?., b1, b2, b3, ?., c1, c2, c3, ?., d1, d2, d3>> ->
        ((a1 - ?0) * 100 + (a2 - ?0) * 10 + (a3 - ?0)) * 16_777_216 +
          ((b1 - ?0) * 100 + (b2 - ?0) * 10 + (b3 - ?0)) * 65_536 +
          ((c1 - ?0) * 100 + (c2 - ?0) * 10 + (c3 - ?0)) * 256 + (d1 - ?0) * 100 + (d2 - ?0) * 10 +
          (d3 - ?0)

      _ ->
        nil
    end
  end
end
